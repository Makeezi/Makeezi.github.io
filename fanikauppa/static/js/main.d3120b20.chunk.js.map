{"version":3,"sources":["components/Carousel.js","components/Nav.js","components/Blank.js","components/Products.js","App.js","index.js"],"names":["Carousel","carouselData","useState","products","productsInfo","setProductsInfo","text","link","id","amount","price","productInfo","setProductInfo","next","setNext","className","onClick","height","width","viewBox","d","map","product","key","style","transform","src","alt","onSubmit","e","currentAm","attribute","preventDefault","uniqueId","Math","round","random","setOrders","orders","concat","tempAmounts","tempProduct","console","log","submitHandler","onChange","target","value","changeHandler","type","index","setSlideIndex","Nav","shopData","submits","setSubmits","etunimi","sukunimi","puh","email","form","setForm","num","setNum","storeView","document","getElementsByTagName","overflowY","window","scrollTo","tempField","xmlns","fill","item","filter","order","ordered","disabled","length","submit","Blank","texts","text1","Products","App","dataGo","text2","text3","text4","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.d3120b20.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\n\r\n\r\n\r\n\r\nconst Carousel = ({carouselData}) => {\r\n    const [productsInfo, setProductsInfo] = useState(carouselData.products);\r\n    // console.log(productsInfo);\r\n    const [productInfo,  setProductInfo] = useState({text: '', link:'', id:'', amount: 0, price:''});\r\n    const [next, setNext] = useState(0);\r\n\r\n    const setSlideIndex = (index) => {\r\n        let num = -index*100;\r\n        setNext(num);\r\n        // console.log(next);\r\n    }\r\n    \r\n    const setSlideLeft = () => {\r\n        if (next <= -100) {\r\n            setNext(next + 100);\r\n        } else setNext(-200);\r\n       \r\n    }\r\n\r\n    const setSlideRight = () => {\r\n        if (next >= -100) {\r\n            setNext(next - 100);\r\n        } else setNext(0);\r\n        console.log(carouselData.orders);\r\n    }\r\n    \r\n    const submitHandler = (e, currentAm, id, attribute) => {\r\n        e.preventDefault();\r\n        if(currentAm !== 0) {\r\n            const uniqueId = Math.round(Math.random(1000000000000000) * 1000000000000000)\r\n            carouselData.setOrders(carouselData.orders.concat({...productInfo, id: uniqueId}));\r\n\r\n            const tempAmounts = productsInfo.map(product => {\r\n                if(product.id === id) {\r\n                    const tempProduct = {...productInfo, \r\n                                        amount: product.amount,\r\n                                        text: product.text,\r\n                                        link: product.link,\r\n                                        id: product.id,\r\n                                        price: product.price\r\n                                    }\r\n                    tempProduct[attribute] = 0;\r\n                    setProductInfo(tempProduct);\r\n                    return tempProduct;\r\n                } else return product;\r\n                \r\n            })\r\n            \r\n            setProductsInfo(tempAmounts);\r\n\r\n            console.log(carouselData.orders);\r\n                    \r\n        } \r\n        \r\n    }\r\n\r\n    const changeHandler = (e, id, attribute) => { \r\n        const tempAmounts = productsInfo.map(product => {\r\n            if(product.id === id) {\r\n                const tempProduct = {...productInfo, \r\n                                    amount: product.amount,\r\n                                    text: product.text,\r\n                                    link: product.link,\r\n                                    id: product.id,\r\n                                    price: product.price\r\n                                }\r\n                tempProduct[attribute] = e.target.value;\r\n                setProductInfo(tempProduct);\r\n                return tempProduct;\r\n            } else return product;\r\n            \r\n        })\r\n        \r\n        setProductsInfo(tempAmounts);\r\n            \r\n        \r\n    }\r\n\r\n    return (\r\n        <div className=\"carousel-wrapper\">\r\n            <div className=\"carousel\">\r\n                <button className=\"carousel-button carousel-button--left\" onClick={() => setSlideLeft()}>\r\n                    <svg height=\"10\" width=\"10\" viewBox=\"0 0 100 100\">\r\n                        <path d=\"M25 50 L100 90 L93 100 L0 50 L93 0 L100 10 Z\" />\r\n                    </svg>\r\n                </button>\r\n                <div className=\"carousel-container\">      \r\n                    {productsInfo.map(product => {\r\n                        return (\r\n                            <div key={product.text} className=\"carousel-slide\"  style= {{transform: `translateX(${next}%)`}}>\r\n                                <div className=\"carousel-image-wrapper\">\r\n                                    <img \r\n                                        className=\"carousel-image\" \r\n                                        src={product.link}                                     \r\n                                        alt=\"\"\r\n                                        >                           \r\n                                    </img>\r\n                                </div>\r\n                                <div className=\"carousel-form-box\">\r\n                                    <div className=\"carousel-text-box\">\r\n                                        <p>{product.text}</p>\r\n                                    </div>\r\n                                    <div className=\"carousel-form\">\r\n                                        <form onSubmit={e => submitHandler(e, product.amount, product.id, 'amount')}>\r\n                                           \r\n                                            KPL:<input\r\n                                                onChange={e => changeHandler(e, product.id, 'amount')} \r\n                                                value={product.amount} \r\n                                                type =\"number\"\r\n                                                />\r\n                                                \r\n                                                <input type=\"submit\"/>\r\n                                        </form>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        );\r\n                    })}   \r\n                    \r\n                    \r\n                </div>\r\n                <button className=\"carousel-button carousel-button--right\" onClick={() => setSlideRight()}>\r\n                    <svg height=\"10\" width=\"10\" viewBox=\"0 0 100 100\">\r\n                        <path d=\"M25 50 L100 90 L93 100 L0 50 L93 0 L100 10 Z\" />\r\n                    </svg>\r\n                </button>\r\n                <div className=\"carousel-nav\">\r\n                    {productsInfo.map((product, index) => {\r\n                        return (\r\n                            <button key={product.id} className=\"carousel-indicator\" onClick={() => setSlideIndex(index)}></button>\r\n                        )\r\n                    })}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n    \r\n}\r\n\r\nexport default Carousel\r\n","import React, {useState}  from 'react';\r\n\r\nconst Nav = ({shopData}) => {\r\n\r\n    const [submits, setSubmits] = useState([]);\r\n    const [form, setForm] = useState({etunimi:'', sukunimi: '', puh: '', email: ''})\r\n\r\n    const [num, setNum] = useState(100);\r\n    const storeView = () => {\r\n        if (num === 100) {\r\n            setNum(0);\r\n            document.getElementsByTagName(\"body\")[0].style.overflowY = \"hidden\";\r\n            window.scrollTo(0,0);\r\n        } else if (num === 0 ) {\r\n            setNum(100);\r\n            document.getElementsByTagName(\"body\")[0].style.overflowY = \"\";\r\n        }\r\n    }\r\n\r\n\r\n    const deleteOrder = (product) => {\r\n        shopData.setOrders(shopData.orders.filter(order => product !== order.id));\r\n    }\r\n\r\n    \r\n    const changeHandler = (e, attribute) => {\r\n        const tempField = {...form};\r\n        tempField[attribute] = e.target.value;\r\n        \r\n        setForm(tempField);\r\n   \r\n    }\r\n\r\n    const submitHandler = (e) => {\r\n        e.preventDefault();\r\n        \r\n        if(form.etunimi !== '' && form.sukunimi !== '' && form.puh !== '' && form.email !== ''){\r\n            const uniqueId = Math.round(Math.random(1000000000000000) * 1000000000000000);  \r\n            setSubmits(submits.concat({...form, id: uniqueId, ordered: shopData.orders}));\r\n            setForm({etunimi:'', sukunimi: '', puh: '', email: ''})\r\n            shopData.setOrders([]);\r\n        } else {\r\n            console.log(\"anna tiedot\");\r\n        }\r\n    }\r\n\r\n    return (\r\n        <nav className=\"App-header\">\r\n            <h2>logo</h2>\r\n            <div className=\"header-navs\">\r\n                <button className=\"cart\" onClick={() => storeView()}>\r\n                    <svg className=\"cart-svg\" xmlns=\"http://www.w3.org/2000/svg\" width=\"48\" height=\"48\" viewBox=\"0 0 48 48\">\r\n                        <path d=\"M14 36c-2.21 0-3.98 1.79-3.98 4s1.77 4 3.98 4 4-1.79 4-4-1.79-4-4-4zm-12-32v4h4l7.19 15.17-2.7 4.9c-.31.58-.49 1.23-.49 1.93 0 2.21 1.79 4 4 4h24v-4h-23.15c-.28 0-.5-.22-.5-.5 0-.09.02-.17.06-.24l1.79-3.26h14.9c1.5 0 2.81-.83 3.5-2.06l7.15-12.98c.16-.28.25-.61.25-.96 0-1.11-.9-2-2-2h-29.57l-1.9-4h-6.53zm32 32c-2.21 0-3.98 1.79-3.98 4s1.77 4 3.98 4 4-1.79 4-4-1.79-4-4-4z\"/>\r\n                        <path d=\"M0 0h48v48h-48z\" fill=\"none\"/>\r\n                    </svg>\r\n                </button>\r\n            </div>\r\n            <div className=\"overflowed-store\" style= {{transform: `translateX(${num}%)`}}>\r\n                <button className=\"store-back\" onClick={() => storeView()}>\r\n                    <svg id=\"shadow\" height=\"15\" width=\"15\" viewBox=\"0 0 100 100\">\r\n                        <path d=\"M45 52 L100 90 L93 100 L20 50 L93 0 L100 10 Z\" />\r\n                        \r\n                        \r\n                    </svg>\r\n                </button>\r\n                <div className=\"store-wrapper\">\r\n                    \r\n                    <div className=\"store-content-container\">\r\n                        <div className=\"ordered-products\">\r\n                            {shopData.orders.map(item => {\r\n                                return (\r\n                                    <div key={item.id} className=\"product-container\">\r\n                                        <div className=\"product-photo\">\r\n                                            <img alt='' src={item.link}></img>\r\n                                        </div>\r\n                                        <div className=\"product-exp\">\r\n                                            <h4>Hinta {item.price}</h4>\r\n                                            <h4>Määrä {item.amount}</h4>\r\n                                        </div>\r\n                                        <div className=\"product-buttons\">\r\n                                            <button onClick={() => deleteOrder(item.id)}>Delete</button>\r\n                                        </div>\r\n                                    </div>\r\n                                )\r\n                            })}\r\n                            \r\n                        </div>\r\n                        <div className=\"ordering\">\r\n                            <div className=\"order-form-container\">\r\n                                <div className=\"order-form\">\r\n                                    <form onSubmit={submitHandler}>\r\n                                        <p>\r\n                                            <label >Etunimi </label>\r\n                                            <input \r\n                                            onChange={e => changeHandler(e, 'etunimi')} \r\n                                            value={form.etunimi} \r\n                                            type =\"text\"\r\n                                            />\r\n                                        </p>\r\n                                        <p>\r\n                                            <label>Sukunimi </label>\r\n                                            <input \r\n                                            onChange={e => changeHandler(e, 'sukunimi')} \r\n                                            value={form.sukunimi} \r\n                                            type =\"text\"\r\n                                            />\r\n                                        </p>\r\n                                        <p>\r\n                                            <label>Puhelinnumero </label>\r\n                                            <input \r\n                                            onChange={e => changeHandler(e, 'puh')} \r\n                                            value={form.puh} \r\n                                            type =\"text\"\r\n                                            />\r\n                                        </p>\r\n                                        <p>\r\n                                            <label>Sähköposti </label>\r\n                                            <input \r\n                                            onChange={e => changeHandler(e, 'email')} \r\n                                            value={form.email} \r\n                                            type =\"text\"\r\n                                            />\r\n                                        </p>\r\n                                        <p>\r\n                                            <label></label>\r\n                                            <input type=\"submit\" disabled={shopData.orders.length === 0} />\r\n                                        </p>\r\n                                    </form>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"submitted-orders\">\r\n                                {submits.map(submit =>{\r\n                                    return (\r\n                                        <div key={submit.id} className=\"ordered-order-container\">\r\n                                                    <div className=\"purchase-container\">\r\n                                                        <p>{submit.id}</p>\r\n                                                    </div>\r\n                                                    <div className=\"puchases-container\">\r\n                                                        {submit.ordered.map(order => {\r\n                                                            return(\r\n                                                                <div key={order.id} className=\"purchased-product\">\r\n                                                                    <img \r\n                                                                        className=\"carousel-image-small\" \r\n                                                                        src={order.link}                                     \r\n                                                                        alt=\"\"\r\n                                                                        >                           \r\n                                                                    </img>\r\n                                                                    <p>{order.price}</p>\r\n                                                                    <p>{order.text}</p>\r\n                                                                    \r\n                                                                </div>\r\n                                                            )\r\n                                                        })}\r\n                                                    </div>\r\n                                                                                                    \r\n                                        </div>\r\n                                    )\r\n                                    })}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Nav;","import React from 'react';\r\n\r\nconst Blank = ({texts}) => {\r\n    return (\r\n        <div className=\"blank\">\r\n            <h3>{texts.text1}</h3>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Blank;","import React from 'react';\r\n\r\nconst Products = () => {\r\n    return (\r\n        <div className=\"section-products\">\r\n            <div className=\"containerA\">\r\n        <div className=\"containerB\"></div>\r\n        <div className=\"containerC\"></div>\r\n      </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Products;","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport Carousel from './components/Carousel'\r\nimport Nav from './components/Nav'\r\nimport Blank from './components/Blank'\r\nimport Products from './components/Products'\r\n\r\nfunction App() {\r\n  \r\n  const products = [\r\n    {\r\n      text: \"eka\",\r\n      link: \"https://www.publicdomainpictures.net/pictures/30000/velka/plain-white-background.jpg\",\r\n      id: 1,\r\n      amount: 0,\r\n      price: 20\r\n    },\r\n    {\r\n      text: \"toka\", \r\n      link: \"https://www.publicdomainpictures.net/pictures/200000/velka/plain-red-background.jpg\",\r\n      id: 2,\r\n      amount: 0,\r\n      price: 10\r\n    },\r\n    {\r\n      text: \"kolmas\", \r\n      link: \"https://www.publicdomainpictures.net/pictures/200000/velka/plain-blue-background.jpg\",\r\n      id: 3,\r\n      amount: 0,\r\n      price: 50\r\n    }\r\n  ]\r\n\r\n  const [orders, setOrders] = useState([]);\r\n \r\n  const texts = {\r\n    text1: 'Kaikki kauppa tavarat',\r\n    text2: '',\r\n    text3: '',\r\n    text4: '',\r\n  }\r\n \r\n  const dataGo = {\r\n    products: products,\r\n    orders: orders,\r\n    setOrders: setOrders,\r\n  }\r\n  \r\n  return (\r\n    <div className=\"App\">\r\n\r\n      <Nav shopData = {dataGo}/>\r\n      <section className=\"App-section\">\r\n        <Carousel carouselData = {dataGo} />\r\n        <Blank texts = {texts} />\r\n        <Products products = {products}/>\r\n      </section >\r\n      <footer className=\"App-footer\">\r\n      \r\n      </footer>\r\n      \r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n\r\n"],"sourceRoot":""}